[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/selection_models.html","id":"p-value-selection-models","dir":"Articles","previous_headings":"","what":"P-Value Selection Models","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"P-value selection models general set methods correct selective reporting modeling process effect size estimates reported (Hedges & Vevea, 2006). Selection models two components: model describing evidence generation process model describing selection process. metaselection package implements flexible class selection models, evidence-generating process follows random effects location-scale model (Viechtbauer & López‐López, 2022) selection process function one-sided p-values, either form step function (Vevea & Hedges, 1995) beta-density function (Citkowicz & Vevea, 2017). Step function model involves specifying steps categorize p-values intervals different probabilities selection (Vevea & Hedges, 1995). beta-density model uses different selection function, based beta distribution, capture complex patterns selection (Citkowicz & Vevea, 2017). Consider meta-analytic dataset total JJ studies, study jj includes kjk_j effect size estimates. Let YijY_{ij} denote effect size estimate produced study, prior selective reporting. effect size estimate standard error σij\\sigma_{ij}, treated fixed quantity. Let 𝐱ij\\mathbf{x}_{ij} 1×x1 \\times x row vector predictors encode characteristics effect size /study may related average effect size magnitude. Let 𝐮ij\\mathbf{u}_{ij} 1×u1 \\times u row vector predictors may related effect size heterogeneity. Let Φ()\\Phi() denote standard normal cumulative distribution function ϕ()\\phi() standard normal density. Finally, let pijp_{ij} one-sided p-value corresponding effect size estimate, function effect size estimate standard error: pij=1−Φ(Yij/σij)=Φ(−Yij/σij)p_{ij} = 1 - \\Phi\\left(Y_{ij} / \\sigma_{ij}\\right) = \\Phi\\left(-Y_{ij} / \\sigma_{ij}\\right).","code":""},{"path":"/articles/selection_models.html","id":"the-evidence-generating-process","dir":"Articles","previous_headings":"P-Value Selection Models","what":"The evidence-generating process","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"model evidence-generating process random effects location-scale model, Yij=𝐱ij𝛃+vij+eij, Y_{ij} = \\mathbf{x}_{ij} \\boldsymbol\\beta + v_{ij} + e_{ij},  𝛃\\boldsymbol\\beta 1×x1 \\times x vector regression coefficients relate predictors average effect size magnitude, viv_i normally distributed random effect mean zero variance τij2\\tau^2_{ij}, eie_i normally distributed sampling error mean zero known variance σij*2\\sigma^{*2}_{ij}. variance random effects modeled log(τij2)=𝐮ij𝛄, \\log\\left(\\tau_{ij}^{2}\\right) = \\mathbf{u}_{ij} \\boldsymbol\\gamma,  𝛄\\boldsymbol\\gamma u×1u \\times 1 vector coefficients relate predictors degree marginal variation random effects. model include predictors heterogeneity, 𝐮ij=1\\mathbf{u}_{ij} = 1 model reduces conventional random effects meta-regression γ=log(τ2)\\gamma = \\log(\\tau^2).","code":""},{"path":"/articles/selection_models.html","id":"the-selective-reporting-process","dir":"Articles","previous_headings":"P-Value Selection Models","what":"The selective reporting process","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"selective reporting process defined selection function, specifies probability given effect size estimate reported varies depending pp-value. Let OijO_{ij} indicator whether effect size ii study jj observed. selection model defines Pr(Oij=1|pij)=Pr(Oij=1|Yij,σij)\\text{Pr}(O_{ij} = 1 \\ | \\ p_{ij}) = \\text{Pr}(O_{ij} = 1 \\ | \\ Y_{ij}, \\sigma_{ij}). distribution observed effect sizes corresponds Pr(Yij=y|Oij=1)=Pr(Oij=1|Yij=y,σij)×Pr(Yij=y|σij)Pr(Oij=1|σij). \\text{Pr}(Y_{ij} = y \\ | \\ O_{ij} = 1) = \\frac{\\text{Pr}(O_{ij} = 1 \\ | \\ Y_{ij} = y, \\sigma_{ij}) \\times \\text{Pr}(Y_{ij} = y \\ | \\ \\sigma_{ij})}{\\text{Pr}(O_{ij} = 1 \\ | \\ \\sigma_{ij})}.  , first term numerator defined selective reporting process second term defined evidence-generating process. Hedges (1992) Vevea & Hedges (1995) proposed model selective reporting process using step-function, thresholds chosen correspond “psychologically salient” pp-values. general formulation, steps α1,...,αH\\alpha_1,...,\\alpha_H Pr(Oij=1|pij)={1ifpij<α1exp(ζ1)ifα1≤pij<α2exp(ζ2)ifα2≤pij<α3⋮exp(ζH)ifαH≤pij. \\text{Pr}(O_{ij} = 1 | p_{ij}) = \\begin{cases} 1 & \\text{} & p_{ij} < \\alpha_1 \\\\  \\exp(\\zeta_1) & \\text{} & \\alpha_1 \\leq p_{ij} < \\alpha_2 \\\\ \\exp(\\zeta_2) & \\text{} & \\alpha_2 \\leq p_{ij} < \\alpha_3 \\\\ \\vdots \\\\ \\exp(\\zeta_H) & \\text{} & \\alpha_H \\leq p_{ij}. \\end{cases}  selection parameters ζ1,...,ζH\\zeta_1,...,\\zeta_H control probabilities selection given p-value, parameter ζh\\zeta_h defined log probability effect size estimate observed, given p-value range [αh,αh+1)[\\alpha_h, \\alpha_{h+1}), relative probability effect size estimate observe, given p-value range [0,α1)[0, \\alpha_1). use log-transformed probabilities parameter space unrestricted, −∞<ζh<+∞-\\infty < \\zeta_h < +\\infty h=1,...,Hh=1,...,H; ζ1=⋯=ζH=0\\zeta_1 = \\cdots = \\zeta_H = 0 therefore describes process effect sizes reported uniform probability, regardless statistical significance level. practice, meta-analysts often use small number steps selection model. One common choice three-parameter selection model, single step α=.025\\alpha = .025. choice threshold, positive effects statistically significant two-sided level p<.05p < .05 different probability selection effects statistically significant anticipated direction. Another possibility use two steps α1=.025\\alpha_1 = .025 α2=.500\\alpha_2 = .500, allows different probabilities selection effects positive statistically significant effects negative (.e., opposite intended direction). call latter model four-parameter selection model.","code":""},{"path":[]},{"path":[]},{"path":"/articles/selection_models.html","id":"bootstrapped-confidence-intervals","dir":"Articles","previous_headings":"P-Value Selection Models","what":"Bootstrapped Confidence Intervals","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"improve confidence interval coverage, X (2025) also examined bootstrapping selection models obtain confidence intervals. Bootstrapping involves re-sampling many times original data create empirical distribution can use place sampling distribution estimate measures uncertainty (Boos, 2003). X (2025) examined variations bootstrapping approaches combined different confidence interval calculations. results showed regular cluster bootstrapping percentile confidence intervals performed best. modified selection models combined bootstrapping led close nominal coverage rates.","code":""},{"path":"/articles/selection_models.html","id":"using-the-metaselection-package","dir":"Articles","previous_headings":"","what":"Using the metaselection package","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"now demonstrate key functions metaselection package. running example, data meta-analysis Lehmann, Elliot, & Calin-Jageman (2018), examined effects color red attractiveness judgments. dataset available metadat package (White, Noble, Senior, Hamilton, & Viechtbauer, 2022) dat.lehmann2018. consists 81 effect sizes 41 studies. following code loads dataset creates variables needed subsequent analysis.","code":"data(\"dat.lehmann2018\", package = \"metadat\") dat.lehmann2018$study <- dat.lehmann2018$Full_Citation dat.lehmann2018$sei <- sqrt(dat.lehmann2018$vi) dat.lehmann2018$esid <- 1:nrow(dat.lehmann2018)"},{"path":"/articles/selection_models.html","id":"prelminary-analysis","dir":"Articles","previous_headings":"Using the metaselection package","what":"Prelminary Analysis","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"point comparison, first run analysis ignores possibility selective reporting bias accounts dependence structure effect sizes using correlated--heirarchical effects working model cluster-robust variance estimation (Pustejovsky & Tipton, 2022). following code first creates sampling variance-covariance matrix assuming effect size estimates study sampling errors correlated 0.8; fits correlated--heirarchical effects working model applies robust variance estimation, clustering study. overall estimate average effect 0.217, 95% CI [0.094, 0.34], significantly different zero (p = 0.001). estimated total heterogeneity (including - within-study heterogeneity) 0.123, corresponding total standard deviation 0.351. Next, examine average effect size estimate differs estimates based step-function beta-function selection model, fitted using metaselection package.","code":"library(metafor) library(clubSandwich)  # Create sampling variance-covariance matrix V_mat <- vcalc(   vi = vi,    cluster = study,   obs = esid,    data = dat.lehmann2018,   rho = .8,   sparse = TRUE )  # First CHE working model CHE_mod <- rma.mv(   yi = yi, V = V_mat,   random = ~ 1 | study / esid,   data = dat.lehmann2018,   sparse = TRUE ) |>    # Apply RVE with small-sample corrections, clustering by study   robust(cluster = study, clubSandwich = TRUE)  CHE_mod ##  ## Multivariate Meta-Analysis Model (k = 81; method: REML) ##  ## Variance Components: ##  ##             estim    sqrt  nlvls  fixed      factor  ## sigma^2.1  0.0494  0.2223     41     no       study  ## sigma^2.2  0.0737  0.2715     81     no  study/esid  ##  ## Test for Heterogeneity: ## Q(df = 80) = 453.5173, p-val < .0001 ##  ## Number of estimates:   81 ## Number of clusters:    41 ## Estimates per cluster: 1-6 (mean: 1.98, median: 1) ##  ## Model Results: ##  ## estimate      se¹    tval¹     df¹    pval¹   ci.lb¹   ci.ub¹      ##   0.2168  0.0607   3.5695   35.75   0.0010   0.0936   0.3400   **  ##  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## 1) results based on cluster-robust inference (var-cov estimator: CR2, ##    approx t-test and confidence interval, df: Satterthwaite approx)"},{"path":"/articles/selection_models.html","id":"three-parameter-step-function-with-rve","dir":"Articles","previous_headings":"Using the metaselection package","what":"Three-Parameter Step Function with RVE","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"primary function fitting p-value selection models selection_model(). code , fit step-function selection model dat.lehmann2018 data using selection_model() function. specify variable effect size, yi, standard error effect size, sei. indicate want estimate \"step\" selection model specify single step .025 setting step = 0.025. default, function fits modeling using composite maximum likelihood estimation calculates standard errors confidence intervals using cluster-robust variance estimation. estimate overall average effect now 0.133, third smaller estimate account selection bias (0.217). estimate longer statistically distinct zero, indicated 95% confidence interval [-0.136, 0.402]. estimates total heterogeneity parameter selection parameter log-scale. can obtain estimate total variance setting argument transf_gamma TRUE print() method. Similarly, can transform selection parameter estimates probability scale setting transf_zeta = TRUE: estimated total heterogeneity 0.081 slightly smaller total heterogeneity estimate CHE model, also imprecisely estimated. selection parameter now called lambda_1. estimate 0.548 indicates effect size estimates one-sided p-values greater .025 half likely reported estimates positive statistically significant (.e., estimates p<.025p < .025). metaselection package provides function selection_plot() visualize estimated selection weights:  plot illustrates likelihood selection differs function one-sided p-value effect size estimate. example, plot shows studies p-values > 0.025 half likely (λ1=0.548\\lambda_1 = 0.548) published studies smaller p-values.","code":"library(metaselection)  mod_3PSM <- selection_model(   data = dat.lehmann2018,    yi = yi,   sei = sei,   cluster = study,   selection_type = \"step\",   steps = .025 )  mod_3PSM ##  param    Est    SE  CI_lo  CI_hi ##   beta  0.133 0.137 -0.136  0.402 ##  gamma -2.512 1.041 -4.553 -0.471 ##  zeta1 -0.601 1.123 -2.802  1.601 print(mod_3PSM, transf_gamma = TRUE, transf_zeta = TRUE) ##     param    Est     SE   CI_lo CI_hi ##      beta 0.1328 0.1373 -0.1363 0.402 ##      tau2 0.0811 0.0845  0.0105 0.625 ##  lambda_1 0.5485 0.6160  0.0607 4.956 selection_plot(mod_3PSM)"},{"path":"/articles/selection_models.html","id":"four-parameter-step-model-with-rve","dir":"Articles","previous_headings":"Using the metaselection package","what":"Four-Parameter Step Model with RVE","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"Rather using single threshold α1=.025\\alpha_1 = .025, fit model also allows selection probability negative effect size estimates differ selection probability positive non-significant estimates. following code fits model, setting steps = c(.025, .500): estimate overall average effect 0.073, even smaller estimated effect three-parameter step model one third magnitude estimate account selection bias (0.217). can visualize estimated selection function selection_plot():  apparent plot, estimated model indicates negatively signed effects (.e., one-sided p-value greater .50) even less likely observed effects positive statistically significant. However, can seen robust confidence intervals model output, selection parameters imprecisely estimated.","code":"mod_4PSM <- selection_model(   data = dat.lehmann2018,    yi = yi,   sei = sei,   cluster = study,   selection_type = \"step\",   steps = c(.025, .500) )  print(mod_4PSM, transf_gamma = TRUE, transf_zeta = TRUE) ##     param    Est     SE   CI_lo CI_hi ##      beta 0.0725 0.1590 -0.2392 0.384 ##      tau2 0.0842 0.0907  0.0102 0.695 ##  lambda_1 0.5022 0.6111  0.0463 5.453 ##  lambda_2 0.3410 0.5097  0.0182 6.383 selection_plot(mod_4PSM)"},{"path":"/articles/selection_models.html","id":"beta-function-with-rve","dir":"Articles","previous_headings":"Using the metaselection package","what":"Beta Function with RVE","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"selection_model() function also allows fitting models based beta density selection functions specifying selection_type = \"beta\". default estimator beta function model maximum likelihood; hybrid estimator yet available. estimate overall average effect -0.122, smaller estimate account selection bias (0.217) estimates three- four-parameter step function models. average effect estimate based beta function statistically distinct zero, indicated 95% confidence intervals [-0.366, 0.123]. see probability selection differs across studies different p-values, can visualize selection function:  plot shows effect sizes smaller p-values likely published effects larger p-values. example, effect size estimate zero (one-sided p-value p=.500p = .500) half likely published effect statistically significant, positive effect.","code":"mod_beta <- selection_model(   data = dat.lehmann2018,    yi = yi,   sei = sei,   cluster = study,   selection_type = \"beta\" )  print(mod_beta, transf_gamma = TRUE, transf_zeta = TRUE) ##     param    Est    SE  CI_lo CI_hi ##      beta -0.122 0.125 -0.366 0.123 ##      tau2  0.165 0.150  0.028 0.977 ##  lambda_1  0.910 0.460  0.338 2.451 ##  lambda_2  1.610 0.337  1.067 2.427 selection_plot(mod_beta)"},{"path":"/articles/selection_models.html","id":"bootstrap-confidence-intervals","dir":"Articles","previous_headings":"Using the metaselection package","what":"Bootstrap Confidence Intervals","title":"P-Value Selection Models for Meta-Analysis with Dependent Effects","text":"Rather relying robust variance estimation construct standard errors confidence intervals, can use cluster-wise bootstrap resampling. code re-fits three-parameter step function model obtain cluster-bootstrap confidence intervals. specify bootstrap = \"multinomial\" run cluster bootstrapping specify want \"percentile\" bootstrap confidence intervals. specify number bootstraps setting R 99. set value 99 solely limit amount computation. practice, recommend using much higher number bootstrap replications, 1999, obtain confidence intervals accurate coverage rates (Davidson & MacKinnon, 2000). highly recommend running selection models cluster bootstrapping, particularly regular multinomial bootstrap percentile confidence intervals, shown improve confidence interval coverage rates relative using forms bootstrap confidence intervals. overall estimate average effect change bootstrapping applied (0.133). However, confidence internal narrower, [-0.005, 0.44] (due use smaller--desirable number bootstrap replications). bootstrapping routine implemented work future future.apply packages parallel processing. example, following code specifies use multisession future processing plan 4 worker nodes, fits model : Setting sequential plan stop use parallel processing:","code":"set.seed(20240916)  system.time(   mod_3PSM_boot <- selection_model(     data = dat.lehmann2018,      yi = yi,     sei = sei,     cluster = study,     selection_type = \"step\",     steps = .025,     CI_type = \"percentile\",     bootstrap = \"multinomial\",     R = 99   ) ) ##    user  system elapsed  ##  12.063   0.035  12.129 print(mod_3PSM_boot, transf_gamma = TRUE, transf_zeta = TRUE) ##     param    Est     SE percentile_lower percentile_upper ##      beta 0.1328 0.1373        -4.51e-03            0.440 ##      tau2 0.0811 0.0845         5.54e-17            0.244 ##  lambda_1 0.5485 0.6160         6.38e-02            2.942 library(future) library(future.apply) plan(multisession, workers = 4L)  system.time(   selection_model(     data = dat.lehmann2018,      yi = yi,     sei = sei,     cluster = study,     selection_type = \"step\",     steps = .025,     CI_type = \"percentile\",     bootstrap = \"multinomial\",     R = 99   )   ) ##    user  system elapsed  ##   0.364   0.007   2.696 plan(sequential)"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Pustejovsky. Author, maintainer. Megha Joshi. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pustejovsky J, Joshi M (2024). metaselection: Meta-analytic selection models cluster-robust cluster-bootstrap standard errors. R package version 0.1.0, https://github.com/jepusto/metaselection.","code":"@Manual{,   title = {metaselection: Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors},   author = {James Pustejovsky and Megha Joshi},   year = {2024},   note = {R package version 0.1.0},   url = {https://github.com/jepusto/metaselection}, }"},{"path":"/index.html","id":"metaselection","dir":"","previous_headings":"","what":"Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors","title":"Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors","text":"Selective reporting occurs statistically significant, affirmative results likely reported (therefore likely available meta-analysis) compared null, non-affirmative results. Selective reporting major concern research synthesis distorts evidence base available meta-analysis. Failure account selective reporting can inflate effect size estimates meta-analysis bias estimates heterogeneity, making difficult draw accurate conclusions synthesis. many tools available already investigate correct selective outcome reporting. Widely used methods include: graphical diagnostics like funnel plots; tests adjustments funnel plot asymmetry like trim--fill, Egger’s regression, PET/PEESE, selection models, p-value diagnostics. However, methods available investigating selective reporting can accommodate dependent effect sizes. limitation poses problem meta-analyses education, psychology social sciences, dependent effects common feature meta-analytic data. Dependent effect sizes occur primary studies report multiple measures outcomes repeated measures outcome. Failing account dependency can result misleading conclusions narrow confidence intervals hypothesis tests inflated type one error rates. X (2024) developed examined methods investigating accounting selective reporting meta-analysis account dependent effect sizes. results showed selection models combined robust variance estimation led lower bias estimate overall effect size. Combining selection models cluster bootstrapping led close nominal coverage rates. metaselection package provides set functions implements methods. main function, selection_model(), fits step function beta density selection models. handle dependence effect size estimates, function provides options use cluster-robust (sandwich) variance estimation cluster bootstrapping assess uncertainty model parameter estimates.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors","text":"can install development version package GitHub :","code":"remotes::install_github(\"jepusto/metaselection\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors","text":"following example uses data meta-analysis Lehmann meta-analysis examined effects color red attractiveness judgments. dataset included metadat package (White et al. 2022) dat.lehmann. code , fit step function selection model Lehmann dataset using selection_model() function, confidence intervals computed using cluster bootstrapping. details, please see vignette.","code":"library(metaselection)  data(\"dat.lehmann2018\", package = \"metadat\") dat.lehmann2018$study <- dat.lehmann2018$Full_Citation dat.lehmann2018$sei <- sqrt(dat.lehmann2018$vi)  set.seed(20240910)  mod_3PSM_boot <- selection_model(   data = dat.lehmann2018,    yi = yi,   sei = sei,   cluster = study,   selection_type = \"step\",   steps = .025,   CI_type = \"percentile\",   bootstrap = \"multinomial\",   R = 19 )  print(mod_3PSM_boot, transf_gamma = TRUE, transf_zeta = TRUE) ##     param    Est     SE percentile_lower percentile_upper ##      beta 0.1328 0.1373          -0.0327            0.377 ##      tau2 0.0811 0.0845           0.0015            0.198 ##  lambda_1 0.5485 0.6160           0.0888            3.055"},{"path":"/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related Work","title":"Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors","text":"want recognize packages provide functions selection modeling. Several existing packages provide tools estimating selection models assuming effects independent. metafor package (Viechtbauer 2010) includes selmodel() function, allows users fit many different types selection models. weightr package (Coburn Vevea 2019) includes functions estimate class p-value selection models described Vevea Hedges (1995). However, functions available packages can applied meta-analytic data assuming effects independent. addition, PublicationBias package (Braginsky, Mathur, VanderWeele 2023) implements sensitivity analyses selective reporting bias incorporate robust variance estimation methods handling dependent effect sizes. However, sensitivity analyses implemented package based pre-specified degree selective reporting, rather allowing degree selection estimated data. sensitivity analyses also based specific simple form step-function model, allow consideration complex forms selection functions.","code":""},{"path":[]},{"path":[]},{"path":"/reference/beta_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Censor meta-analytic dataset based on the beta-density model model — beta_fun","title":"Censor meta-analytic dataset based on the beta-density model model — beta_fun","text":"functional takes model parameters returns function can used censor meta-analytic datasets according beta-density model.","code":""},{"path":"/reference/beta_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Censor meta-analytic dataset based on the beta-density model model — beta_fun","text":"","code":"beta_fun(   delta_1 = 1,   delta_2 = 1,   trunc_1 = 0.025,   trunc_2 = 0.975,   renormalize = TRUE )"},{"path":"/reference/beta_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Censor meta-analytic dataset based on the beta-density model model — beta_fun","text":"delta_1 numeric value first parameter beta function delta_2 numeric value second parameter beta function trunc_1 numeric value 0 1, p-values truncated. trunc_2 numeric value 0 1, p-values truncated. renormalize logical indicating whether normalize beta function maximum value 1, default value TRUE.","code":""},{"path":"/reference/beta_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Censor meta-analytic dataset based on the beta-density model model — beta_fun","text":"function can used censor meta-analytic dataset based beta-density model.","code":""},{"path":"/reference/interleaved_learning.html","id":null,"dir":"Reference","previous_headings":"","what":"Interleaved Learning Meta-Analysis — interleaved_learning","title":"Interleaved Learning Meta-Analysis — interleaved_learning","text":"Meta-analytic dataset containing results primary studies examining effect interleaved learning.","code":""},{"path":"/reference/interleaved_learning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interleaved Learning Meta-Analysis — interleaved_learning","text":"","code":"interleaved_learning"},{"path":"/reference/interleaved_learning.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Interleaved Learning Meta-Analysis — interleaved_learning","text":"data frame 238 rows 21 variables: study name study esid identifier effect size g effect size form Hedges' g vg corresponding variance effect size sample_id identifier sample within study article_num identifier publication item_num code items (1) Paintings including mostly impressionistic paintings different artists coded 0, (2) Naturalistic photographs pictures birds, butterflies coded 3, (3) Artificial pictures, , pictures artificial objects creatures coded 1, (4) Mathematical tasks, calculating volume geometric solids use significance tests coded 2, (5) Expository Texts, included plain expository texts combinations texts media multimedia/interactive media environment coded 5, (6) Words, names belonged different conceptual categories, pronunciation rules, translations different languages coded 4, (7) Tastes liquids different tastes coded 6 age mean age participants grey_lit indicator grey literature 1 indicating theses dissertations 0 indicating articles conference papers design indicator research design 1 indicating within-participants design 0 indicating -participants design students indicator type sample 1 indicating samples students 0 indicating types samples retention_interval indicator retention interval length 1 indicating long (>= 20 min) intervals 0 indicating short (< 20 min) intervals intentionality indicator intentional learning designs 1 indicating incidental learning designs 0 indicating intentional learning designs transfer_retention indicator type tests 1 indicating transfer tests 0 indicating retention tests simultaneity indicator type presentation 1 indicating simultaneous presentation 0 indicating successive presentation zmean_within standardized ratings similarity within categories zmean_between standardized ratings similarity categories zmean_complex standardized ratings complexity zmean_fam standardized ratings familiarity zmean_cur standardized ratings curiosity spaced indicator spacing spaced indicating designs spaced items (10 30 sec time intervals), nonspaced indicating designs immediate succession items (less 2 sec), -1 indicating designs distractors presentation items coded distract items included analysis spacing items","code":""},{"path":"/reference/interleaved_learning.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Interleaved Learning Meta-Analysis — interleaved_learning","text":"OSF page project","code":""},{"path":"/reference/interleaved_learning.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Interleaved Learning Meta-Analysis — interleaved_learning","text":"Brunmair, M., & Richter, T. (2019). Similarity matters: meta-analysis interleaved learning moderators. Psychological Bulletin, 145(11), 1029. doi:10.1037/bul0000209","code":""},{"path":"/reference/metaselection-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metaselection: Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors — metaselection-package","title":"metaselection: Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors — metaselection-package","text":"Fits flexible class p-value selection models meta-analysis meta-regression models, providing standard errors confidence intervals based either cluster-robust variance estimators (.e., sandwich estimators) cluster-level bootstrapping. Supported models include generalizations step-function selection model proposed Vevea Hedges (1995) doi:10.1007/BF02294384  beta-function selection model proposed Citkowicz Vevea (2017) doi:10.1037/met0000119 .","code":""},{"path":[]},{"path":"/reference/metaselection-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metaselection: Meta-analytic selection models with cluster-robust and cluster-bootstrap standard errors — metaselection-package","text":"Maintainer: James Pustejovsky jepusto@gmail.com (ORCID) Authors: Megha Joshi megha.j456@gmail.com (ORCID)","code":""},{"path":"/reference/n_ES_empirical.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_empirical","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_empirical","text":"functional takes dataset empirical distribution primary study sample sizes number effect sizes per primary study returns function generates random samples dataset","code":""},{"path":"/reference/n_ES_empirical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_empirical","text":"","code":"n_ES_empirical(dat)"},{"path":"/reference/n_ES_empirical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_empirical","text":"dat data.frame tibble containing primary study sample sizes number effect sizes per primary study","code":""},{"path":"/reference/n_ES_empirical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_empirical","text":"function generates random samples input dataset.","code":""},{"path":"/reference/n_ES_empirical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_empirical","text":"","code":"study_features <- n_ES_empirical(wwc_es) study_features(m=3) #>       n n_ES #> 173 605    4 #> 407 104    7 #> 460  80    2 study_features(m=7) #>        n n_ES #> 63  1458   22 #> 485   70    1 #> 559   48    3 #> 452   84    5 #> 201  467    9 #> 197  497    2 #> 517   61    1"},{"path":"/reference/n_ES_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_param","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_param","text":"functional takes average sample size per primary study, average number effect sizes per study, minimum sample size per study returns function generate random samples primary study sample sizes numbers effect sizes per study.","code":""},{"path":"/reference/n_ES_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_param","text":"","code":"n_ES_param(mean_N, mean_ES, min_N = 20L)"},{"path":"/reference/n_ES_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_param","text":"mean_N numeric value specifying average sample size per primary study mean_ES numeric value specifying average number effect sizes per primary study min_N numeric value specifying minimum sample size per study","code":""},{"path":"/reference/n_ES_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_param","text":"function generates data.frame randomly generated sample size per primary study number effect sizes per study.","code":""},{"path":"/reference/n_ES_param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate empirical distribution of sample size and number of effect sizes — n_ES_param","text":"","code":"study_features <- n_ES_param(mean_N = 40, mean_ES = 3, min_N = 10) study_features(m = 3) #>    n n_ES #> 1 38    2 #> 2 38    4 #> 3 38    4 study_features(m = 5) #>    n n_ES #> 1 35    4 #> 2 31    6 #> 3 42    2 #> 4 35    2 #> 5 39    4"},{"path":"/reference/print.selmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print results from selmodel() — print.selmodel","title":"Print results from selmodel() — print.selmodel","text":"Print relevant results selmodel()","code":""},{"path":"/reference/print.selmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print results from selmodel() — print.selmodel","text":"","code":"# S3 method for class 'selmodel' print(x, transf_gamma = FALSE, transf_zeta = FALSE, digits = 3, ...)"},{"path":"/reference/print.selmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print results from selmodel() — print.selmodel","text":"x Fitted model class \"selmodel\". transf_gamma logical TRUE indicating heterogeneity parameter estimates (called gamma) transformed exponentiating. transf_zeta logical TRUE indicating selection parameter estimates (called zeta) transformed exponentiating. digits Minimum number significant digits used, default 3. ... arguments passed print.data.frame().","code":""},{"path":"/reference/print.selmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print results from selmodel() — print.selmodel","text":"","code":"res_ML <- selection_model(   data = self_control,   yi = g,   sei = se_g,   cluster = studyid,   steps = 0.025,   estimator = \"ML\",   bootstrap = \"none\" )  print(res_ML, transf_gamma = TRUE, transf_zeta = TRUE) #>     param    Est     SE   CI_lo CI_hi #>      beta 0.2200 0.0538 0.11443 0.325 #>      tau2 0.0395 0.0297 0.00902 0.173 #>  lambda_1 1.0386 0.5188 0.39020 2.765"},{"path":"/reference/r_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate meta-analytic data — r_meta","title":"Generate meta-analytic data — r_meta","text":"Generate meta-analytic correlated correlated hierarchical effects data options simulate selective outcome reporting","code":""},{"path":"/reference/r_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate meta-analytic data — r_meta","text":"","code":"r_meta(   mean_smd,   tau,   omega,   m,   cor_mu,   cor_sd,   censor_fun,   n_ES_sim,   m_multiplier = 2,   id_start = 0L,   paste_ids = TRUE,   include_sel_prob = FALSE )"},{"path":"/reference/r_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate meta-analytic data — r_meta","text":"mean_smd numeric value indicating true mean effect size tau numeric value characterizing -study heterogeneity effects omega numeric value characterizing within-study heterogeneity effects m numeric value studies simulated meta-analysis cor_mu numeric value indicating average correlation outcomes cor_sd numeric value indicating standard deviation correlation outcomes censor_fun function used censor effects; package provides functionals step_fun() beta_fun() censor effects based step-function beta-function models respectively. n_ES_sim function used simulate distribution primary study sample sizes number effect sizes per study m_multiplier numeric value indicating multiplier buffer number studies id_start integer indicating starting value study id paste_ids logical TRUE (default) indicating study id effect size id pasted together include_sel_prob logical TRUE indicating returned dataset include variable selection_prob reporting true probability selection given observed p-value. Default FALSE indicates selection_prob variable omitted.","code":""},{"path":"/reference/r_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate meta-analytic data — r_meta","text":"data.frame containing simulated meta-analytic dataset.","code":""},{"path":"/reference/r_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate meta-analytic data — r_meta","text":"","code":"example_dat <- r_meta(   mean_smd = 0,   tau = .1, omega = .01,   m = 50,   cor_mu = .4, cor_sd = 0.001,   censor_fun = step_fun(cut_vals = .025, weights = 0.4),   n_ES_sim = n_ES_param(40, 3) )"},{"path":"/reference/selection_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate step or beta selection model — selection_model","title":"Estimate step or beta selection model — selection_model","text":"Estimate step beta selection model","code":""},{"path":"/reference/selection_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate step or beta selection model — selection_model","text":"","code":"selection_model(   data,   yi,   sei,   pi,   ai,   cluster,   selection_type = c(\"step\", \"beta\"),   steps = NULL,   mean_mods = NULL,   var_mods = NULL,   sel_mods = NULL,   sel_zero_mods = NULL,   subset = NULL,   estimator = \"ML\",   vcov_type = \"robust\",   CI_type = \"large-sample\",   conf_level = 0.95,   theta = NULL,   optimizer = NULL,   optimizer_control = list(),   use_jac = TRUE,   bootstrap = \"none\",   R = 1999,   ... )"},{"path":"/reference/selection_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate step or beta selection model — selection_model","text":"data data.frame tibble containing meta-analytic data yi vector effect sizes estimates. sei vector sampling standard errors. pi optional vector one-sided p-values. specified, p-values computed yi sei. ai optional vector analytic weights. cluster vector indicating observations belong cluster. selection_type character string specifying type selection model estimate, possible options \"step\" \"beta\". steps selection_type = \"step\", numeric vector one values specifying thresholds (steps) selection probability changes, default steps = .025. selection_type = \"beta\", numeric vector two values specifying thresholds beyond selection function truncated, default steps = c(.025, .975). mean_mods optional model formula moderators related average effect size magnitude. var_mods optional model formula moderators related effect size heterogeneity. sel_mods optional model formula moderators related probability selection. relevant selection_type = \"step\". sel_zero_mods optional model formula moderators related probability selection p-values lowest threshold value steps. relevant selection_type = \"step\". subset optional logical expression indicating subset observations use estimation. estimator vector indicating whether use maximum likelihood hybrid estimator, possible options \"ML\", \"hybrid\", \"hybrid-full\". selection_type = \"beta\", maximum likelihood estimator, \"ML\", available. step function models, maximum likelihood hybrid estimators available. vcov_type character string specifying type variance-covariance matrix calculate, possible options \"robust\" robust cluster-robust standard errors, \"model-based\" model-based standard errors, \"none\". CI_type character string specifying type confidence interval calculate, possible options \"large-sample\" large-sample normal (default), \"percentile\" percentile bootstrap, \"basic\" basic bootstrap, \"student\" studentized bootstrap, \"none\". conf_level desired coverage level confidence intervals, default value set .95 theta optional numeric vector starting values use optimization routines. optimizer character string indicating optimizer use. Ignored estimator = \"hybrid\" \"hybrid-full\". optimizer_control optional list control parameters used optimization use_jac logical TRUE (default) indicating use Jacobian estimating equations optimization. bootstrap character string specifying type bootstrap run, possible options \"none\" (default), \"exponential\" fractionally re-weighted cluster bootstrap, \"multinomial\" conventional clustered bootstrap. R number bootstrap replications, default 1999. ... arguments passed simhelpers::bootstrap_CIs.","code":""},{"path":"/reference/selection_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate step or beta selection model — selection_model","text":"numeric vector.","code":""},{"path":"/reference/selection_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate step or beta selection model — selection_model","text":"","code":"res_ML <- selection_model(   data = self_control,   yi = g,   sei = se_g,   cluster = studyid,   steps = 0.025,   estimator = \"ML\",   bootstrap = \"none\" )  res_ML #>  param     Est     SE  CI_lo  CI_hi #>   beta  0.2200 0.0538  0.114  0.325 #>  gamma -3.2316 0.7533 -4.708 -1.755 #>  zeta1  0.0379 0.4995 -0.941  1.017 summary(res_ML) #> Step Function Model  #>   #> Call:  #> selection_model(data = self_control, yi = g, sei = se_g, cluster = studyid,  #>     steps = 0.025, estimator = \"ML\", bootstrap = \"none\") #>  #> Number of clusters = 33; Number of effects = 158 #>  #> Steps: 0.025  #> Estimator: maximum likelihood  #> Variance estimator: robust  #>  #> Mean effect estimates:                                        #>                            Large Sample #>  Coef. Estimate Std. Error Lower  Upper #>   beta     0.22     0.0538 0.114  0.325 #>  #> Heterogeneity estimates:                                        #>                            Large Sample #>  Coef. Estimate Std. Error Lower  Upper #>  gamma    -3.23      0.753 -4.71  -1.76 #>  #> Selection process estimates:                                         #>                             Large Sample #>  Coef. Estimate Std. Error  Lower  Upper #>  zeta1   0.0379      0.499 -0.941   1.02  # configure progress bar progressr::handlers(global = TRUE) #> Error in globalCallingHandlers(condition = global_progression_handler): should not be called with handlers on the stack  res_hybrid <- selection_model(   data = self_control,   yi = g,   sei = se_g,   cluster = studyid,   steps = 0.025,   estimator = \"hybrid\",   bootstrap = \"multinomial\",   CI_type = \"percentile\",   R = 19 )  res_hybrid #>  param    Est     SE percentile_lower percentile_upper #>   beta  0.220 0.0484            0.151            0.381 #>  gamma -3.234 0.7698          -25.273           -1.901 #>  zeta1  0.036 0.1443           -1.362            0.988 summary(res_hybrid) #> Step Function Model with Cluster Bootstrapping  #>   #> Call:  #> selection_model(data = self_control, yi = g, sei = se_g, cluster = studyid,  #>     steps = 0.025, estimator = \"hybrid\", CI_type = \"percentile\",  #>     bootstrap = \"multinomial\", R = 19) #>  #> Number of clusters = 33; Number of effects = 158 #>  #> Steps: 0.025  #> Estimator: hybrid estimating equations  #> Variance estimator: robust  #> Bootstrap type: multinomial  #> Number of bootstrap replications: 19  #>  #> Mean effect estimates:                                                #>                            Percentile Bootstrap #>  Coef. Estimate Std. Error      Lower     Upper #>   beta     0.22     0.0484      0.151     0.381 #>  #> Heterogeneity estimates:                                                #>                            Percentile Bootstrap #>  Coef. Estimate Std. Error      Lower     Upper #>  gamma    -3.23       0.77      -25.3      -1.9 #>  #> Selection process estimates:                                                #>                            Percentile Bootstrap #>  Coef. Estimate Std. Error      Lower     Upper #>  zeta1    0.036      0.144      -1.36     0.988"},{"path":"/reference/selection_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the selection weights implied by an estimated selection model. — selection_plot","title":"Plot the selection weights implied by an estimated selection model. — selection_plot","text":"fitted model class \"selmodel\", create plot selection weights implied model parameter estimates. model includes bootstrapped confidence intervals, plot also display selection weights implied bootstrap replicate parameter estimates.","code":""},{"path":"/reference/selection_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the selection weights implied by an estimated selection model. — selection_plot","text":"","code":"selection_plot(mod, pts = 200L, ...)  # S3 method for class 'selmodel' selection_plot(   mod,   pts = 200L,   fill = \"blue\",   alpha = 0.5,   step_linetype = \"dashed\",   ... )  # S3 method for class 'boot.selmodel' selection_plot(   mod,   pts = 200L,   color = \"black\",   linewidth = 1.2,   step_linetype = \"dashed\",   draw_boots = TRUE,   boot_color = \"blue\",   boot_alpha = 0.1,   ... )"},{"path":"/reference/selection_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the selection weights implied by an estimated selection model. — selection_plot","text":"mod Fitted model class \"selmodel\". pts Number points calculate selection weights, default 200 points, evenly spaced 0 1. ... arguments passed methods. fill character string specifying fill-color use mod include bootstrap replications, default \"blue\". Passed ggplot2::geom_area(). alpha numeric value specifying opacity filled area plot, default 0.5. Passed ggplot2::geom_area(). used mod include bootstrap replications. step_linetype character string specifying type line draw indicate p-value thresholds assumed mod. color character string specifying line color use drawing estimated selection weights, default \"black\". Passed ggplot2::geom_line(). used mod includes bootstrap replications. linewidth numeric value specifying line width use drawing estimated selection weights, default 1.2. Passed ggplot2::geom_line(). used mod includes bootstrap replications. draw_boots logical value indicating whether draw selection weights bootstrap replication, default TRUE. boot_color character string specifying line color use drawing selection weights bootstrap replication, default \"blue\". Passed ggplot2::geom_line(). used mod includes bootstrap replications. boot_alpha numeric value specifying opacity lines drawing selection weights bootstrap replication, default \"blue\". Passed ggplot2::geom_line(). used mod includes bootstrap replications.","code":""},{"path":"/reference/selection_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the selection weights implied by an estimated selection model. — selection_plot","text":"ggplot2 object.","code":""},{"path":"/reference/selection_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the selection weights implied by an estimated selection model. — selection_plot","text":"","code":"mod <- selection_model(   data = self_control,   yi = g,   sei = se_g,   cluster = studyid,   steps = c(0.025, .5),   estimator = \"ML\",   bootstrap = \"none\" )  selection_plot(mod, fill = \"purple\")    mod_boot <- selection_model(   data = self_control,   yi = g,   sei = se_g,   cluster = studyid,   steps = c(0.025, .5),   estimator = \"ML\",   bootstrap = \"multinomial\",   CI_type = \"percentile\",   R = 9 )   selection_plot(mod_boot)   selection_plot(mod_boot, draw_boots = FALSE) # turn off bootstrap lines   selection_plot(mod_boot, color = \"red\", boot_color = \"orange\") # change colors"},{"path":"/reference/selection_wts.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate model-implied weights for specified p-values. — selection_wts","title":"Calculate model-implied weights for specified p-values. — selection_wts","text":"Calculates selection weights implied estimated model user-specified p-value set p-values.","code":""},{"path":"/reference/selection_wts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate model-implied weights for specified p-values. — selection_wts","text":"","code":"selection_wts(mod, pvals, ...)  # S3 method for class 'step.selmodel' selection_wts(mod, pvals, bootstraps = TRUE, ...)  # S3 method for class 'beta.selmodel' selection_wts(mod, pvals, bootstraps = TRUE, ...)"},{"path":"/reference/selection_wts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate model-implied weights for specified p-values. — selection_wts","text":"mod Fitted model class \"selmodel\". pvals Numeric vector p-values calculate selection weights. ... arguments passed methods. bootstraps mod includes bootstrap replications, setting bootstraps = TRUE return selection weights bootstrap replication, addition selection weights implied model parameter estimates. Ignored mod include bootstrap replications.","code":""},{"path":"/reference/selection_wts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate model-implied weights for specified p-values. — selection_wts","text":"mod include bootstrapped confidence intervals argument bootstraps = FALSE, selection_wts return data.frame containing user-specified p-values selection weights implied estimated model parameters. mod include bootstrapped confidence intervals (.e., inherits(mod, \"boot.selmodel\") TRUE) argument bootstraps = TRUE, selection_wts return list two elements. first element data.frame containing user-specified p-values selection weights implied estimated model parameters. second element data.frame containing user-specified p-values selection weights implied bootstrap replicate model parameter estimates. data.frame includes additional variable, rep, identifying bootstrap replicate.","code":""},{"path":"/reference/selection_wts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate model-implied weights for specified p-values. — selection_wts","text":"","code":"mod <- selection_model(   data = self_control,   yi = g,   sei = se_g,   cluster = studyid,   steps = c(0.025, .5),   estimator = \"ML\",   bootstrap = \"none\" )  selection_wts(mod, pvals = seq(0, 1, 0.2)) #>     p        wt #> 1 0.0 1.0000000 #> 2 0.2 0.8555420 #> 3 0.4 0.8555420 #> 4 0.6 0.3614923 #> 5 0.8 0.3614923 #> 6 1.0 0.3614923  mod_boot <- selection_model(   data = self_control,   yi = g,   sei = se_g,   cluster = studyid,   steps = c(0.025, .5),   estimator = \"ML\",   bootstrap = \"multinomial\",   CI_type = \"percentile\",   R = 9 )  selection_wts(mod_boot, pvals = seq(0, 1, 0.2)) #> $wts #>     p        wt #> 1 0.0 1.0000000 #> 2 0.2 0.8555420 #> 3 0.4 0.8555420 #> 4 0.6 0.3614923 #> 5 0.8 0.3614923 #> 6 1.0 0.3614923 #>  #> $boot_wts #>    rep   p        wt #> 1    1 0.0 1.0000000 #> 2    1 0.2 0.9893249 #> 3    1 0.4 0.9893249 #> 4    1 0.6 0.2897322 #> 5    1 0.8 0.2897322 #> 6    1 1.0 0.2897322 #> 7    2 0.0 1.0000000 #> 8    2 0.2 0.8408823 #> 9    2 0.4 0.8408823 #> 10   2 0.6 0.3392195 #> 11   2 0.8 0.3392195 #> 12   2 1.0 0.3392195 #> 13   3 0.0 1.0000000 #> 14   3 0.2 1.2379700 #> 15   3 0.4 1.2379700 #> 16   3 0.6 0.7158056 #> 17   3 0.8 0.7158056 #> 18   3 1.0 0.7158056 #> 19   4 0.0 1.0000000 #> 20   4 0.2 0.7109054 #> 21   4 0.4 0.7109054 #> 22   4 0.6 0.3367876 #> 23   4 0.8 0.3367876 #> 24   4 1.0 0.3367876 #> 25   5 0.0 1.0000000 #> 26   5 0.2 0.5776662 #> 27   5 0.4 0.5776662 #> 28   5 0.6 0.1866829 #> 29   5 0.8 0.1866829 #> 30   5 1.0 0.1866829 #> 31   6 0.0 1.0000000 #> 32   6 0.2 0.5696899 #> 33   6 0.4 0.5696899 #> 34   6 0.6 0.2514365 #> 35   6 0.8 0.2514365 #> 36   6 1.0 0.2514365 #> 37   7 0.0 1.0000000 #> 38   7 0.2 0.7180944 #> 39   7 0.4 0.7180944 #> 40   7 0.6 0.2427214 #> 41   7 0.8 0.2427214 #> 42   7 1.0 0.2427214 #> 43   8 0.0 1.0000000 #> 44   8 0.2 0.8126387 #> 45   8 0.4 0.8126387 #> 46   8 0.6 0.9759344 #> 47   8 0.8 0.9759344 #> 48   8 1.0 0.9759344 #> 49   9 0.0 1.0000000 #> 50   9 0.2 1.0135422 #> 51   9 0.4 1.0135422 #> 52   9 0.6 0.5519481 #> 53   9 0.8 0.5519481 #> 54   9 1.0 0.5519481 #>"},{"path":"/reference/self_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Self-Control Training Meta-Analysis — self_control","title":"Self-Control Training Meta-Analysis — self_control","text":"Meta-analytic dataset containing results primary studies examining effect self-control training.","code":""},{"path":"/reference/self_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Self-Control Training Meta-Analysis — self_control","text":"","code":"self_control"},{"path":"/reference/self_control.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Self-Control Training Meta-Analysis — self_control","text":"data frame 158 rows 26 variables: studyid identifier study esid identifier effect size name name study g effect size form Hedges' g var_g corresponding variance effect size se_g corresponding standard error effect size outcome name outcome measure comparison conditions compared type_of_treatment type treatment/training length_of_treatment length treatment coded days publication_status indicator whether study published publication_status_new indicator whether study published (newer version) publication_year year study published research_group indicator whether researchers study belonged strength model group control_group_quality quality control group active indicating control group worked task gender_ratio percentage males sample type_of_outcome type outcome subjectivity_of_outcome_measurement indicator subjectivity outcome measure lab_based_versus_real_world_behavior indicator whether behavior measured assessed lab real-world stamina_versus_strength indicator whether outcome assessed (Stamina) without preceding effortful task (Strength) pre_test_measurement indicator whether pre post measure outcome post measure sample_population population examined study sample_age average age sample attrition percentage attrition participant_compensation type compensation received participants self_control_potential indicator whether outcome measure required utilization maximum self-control potential","code":""},{"path":"/reference/self_control.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Self-Control Training Meta-Analysis — self_control","text":"OSF page project","code":""},{"path":"/reference/self_control.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Self-Control Training Meta-Analysis — self_control","text":"Friese, M., Frankenbach, J., Job, V., & Loschelder, D. D. (2017). self-control training improve self-control? meta-analysis. Perspectives Psychological Science, 12(6), 1077-1099. doi:10.1177/1745691617697076","code":""},{"path":"/reference/step_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Censor meta-analytic dataset based on a step-function model — step_fun","title":"Censor meta-analytic dataset based on a step-function model — step_fun","text":"functional takes cut values weights representing selection probabilities different intervals p-values returns function can used censor meta-analytic datasets according step-function model.","code":""},{"path":"/reference/step_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Censor meta-analytic dataset based on a step-function model — step_fun","text":"","code":"step_fun(cut_vals = 0.025, weights = 1, renormalize = TRUE)"},{"path":"/reference/step_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Censor meta-analytic dataset based on a step-function model — step_fun","text":"cut_vals numeric vector one values specifying specifying thresholds (steps) selection probability changes. weights numeric vector one values specifying selection probabilities different intervals p-values; intervals determined cut_vals. renormalize logical indicating whether normalize step function maximum value 1, default value TRUE.","code":""},{"path":"/reference/step_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Censor meta-analytic dataset based on a step-function model — step_fun","text":"function can used censor meta-analytic dataset based step-function model.","code":""},{"path":"/reference/summary.selmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize results from selmodel() — summary.selmodel","title":"Summarize results from selmodel() — summary.selmodel","text":"Summarize relevant results selmodel()","code":""},{"path":"/reference/summary.selmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize results from selmodel() — summary.selmodel","text":"","code":"# S3 method for class 'selmodel' summary(object, transf_gamma = FALSE, transf_zeta = FALSE, digits = 3, ...)"},{"path":"/reference/summary.selmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize results from selmodel() — summary.selmodel","text":"object Fitted model class \"selmodel\". transf_gamma logical TRUE indicating heterogeneity parameter estimates (called gamma) transformed exponentiating. transf_zeta logical TRUE indicating selection parameter estimates (called zeta) transformed exponentiating. digits Minimum number significant digits used, default 3. ... arguments passed print.data.frame().","code":""},{"path":"/reference/summary.selmodel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize results from selmodel() — summary.selmodel","text":"","code":"res_ML <- selection_model(   data = self_control,   yi = g,   sei = se_g,   cluster = studyid,   steps = 0.025,   estimator = \"ML\",   bootstrap = \"none\" )  summary(res_ML, transf_gamma = TRUE, transf_zeta = TRUE) #> Step Function Model  #>   #> Call:  #> selection_model(data = self_control, yi = g, sei = se_g, cluster = studyid,  #>     steps = 0.025, estimator = \"ML\", bootstrap = \"none\") #>  #> Number of clusters = 33; Number of effects = 158 #>  #> Steps: 0.025  #> Estimator: maximum likelihood  #> Variance estimator: robust  #>  #> Mean effect estimates:                                        #>                            Large Sample #>  Coef. Estimate Std. Error Lower  Upper #>   beta     0.22     0.0538 0.114  0.325 #>  #> Heterogeneity estimates:                                          #>                              Large Sample #>  Coef. Estimate Std. Error   Lower  Upper #>   tau2   0.0395     0.0297 0.00902  0.173 #>  #> Selection process estimates:                                           #>                               Large Sample #>     Coef. Estimate Std. Error Lower  Upper #>  lambda_1     1.04      0.519  0.39   2.76"},{"path":"/reference/wwc_es.html","id":null,"dir":"Reference","previous_headings":"","what":"What Works Clearinghouse sample size and effect size distribution data — wwc_es","title":"What Works Clearinghouse sample size and effect size distribution data — wwc_es","text":"dataset containing sample size number effect sizes seen primary studies evaluated Works Clearinghouse.","code":""},{"path":"/reference/wwc_es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What Works Clearinghouse sample size and effect size distribution data — wwc_es","text":"","code":"wwc_es"},{"path":"/reference/wwc_es.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"What Works Clearinghouse sample size and effect size distribution data — wwc_es","text":"tibble 615 rows 2 variables: n sample size primary study n_ES number effect sizes primary study","code":""},{"path":"/reference/wwc_es.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"What Works Clearinghouse sample size and effect size distribution data — wwc_es","text":"Works Clearinghouse. (2021). Data individual studies. https://ies.ed.gov/ncee/wwc/studyfindings","code":""}]
